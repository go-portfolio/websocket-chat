package chat

import (
	"fmt"
	"sync"
	"time"
)

// ChatMessage –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
type ChatMessage struct {
	Type      string             `json:"type"`         // –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: "system" –∏–ª–∏ "message" –∏–ª–∏ "private"
	From      string             `json:"from"`         // –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ "system"
	To        string             `json:"to,omitempty"` // –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	Text      string             `json:"text"`         // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	Timestamp int64              `json:"timestamp"`    // –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ Unix
	Room      string             `join:"room"`
	Users     map[string]*Client // üîë username ‚Üí client
}

type Room struct {
	Name      string
	Clients   map[*Client]bool
	Broadcast chan ChatMessage
	History   []ChatMessage
	Mu        sync.RWMutex
}

// Hub —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏, —Ä–∞—Å—Å—ã–ª–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏
type Hub struct {
	Clients      map[*Client]bool // –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
	Broadcast    chan ChatMessage // –ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
	RegisterCh   chan *Client     // –ö–∞–Ω–∞–ª –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
	unregisterCh chan *Client     // –ö–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
	Rooms        map[string]*Room
	mu           sync.RWMutex // –ú—å—é—Ç–µ–∫—Å –¥–ª—è –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≥–æ–Ω–æ–∫
}

// NewHub —Å–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π Hub
func NewHub() *Hub {
	return &Hub{
		Clients:      make(map[*Client]bool),
		Rooms:        make(map[string]*Room),
		Broadcast:    make(chan ChatMessage, 128), // –ë—É—Ñ–µ—Ä –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
		RegisterCh:   make(chan *Client),
		unregisterCh: make(chan *Client),
	}
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª Hub, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é,
// —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
func (chatHub *Hub) Run() {
	for {
		select {
		// –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è
		case client := <-chatHub.RegisterCh:
			chatHub.mu.Lock()
			chatHub.Clients[client] = true
			chatHub.mu.Unlock()

			room := chatHub.GetRoom(client.Room.Name)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–Ω–∞—Ç—ã –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
			room.Mu.RLock()
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
			for _, msg := range room.History {
				client.PrivateChan <- msg
			}
			room.Mu.RUnlock()

			room.Mu.Lock()
			room.Clients[client] = true
			room.Mu.Unlock()

			// –°–æ–æ–±—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
			room.Broadcast <- ChatMessage{
				Type:      "system",
				From:      client.Username,
				Room:      room.Name,
				Text:      fmt.Sprintf("–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ %s", room.Name),
				Timestamp: time.Now().Unix(),
			}

		// –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è
		case client := <-chatHub.unregisterCh:
			chatHub.mu.Lock()
			if _, ok := chatHub.Clients[client]; ok {
				delete(chatHub.Clients, client)
				close(client.CloseCh) // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª –∫–ª–∏–µ–Ω—Ç–∞
			}
			chatHub.mu.Unlock()

			room := chatHub.GetRoom(client.Room.Name)

			room.Mu.Lock()
			delete(room.Clients, client) // —É–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
			room.Mu.Unlock()

			// –°–æ–æ–±—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –≤—ã—à–µ–ª
			room.Broadcast <- ChatMessage{
				Type:      "system",
				From:      client.Username,
				Room:      room.Name,
				Text:      fmt.Sprintf("–ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É %s", room.Name),
				Timestamp: time.Now().Unix(),
			}

		// –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
		case msg := <-chatHub.Broadcast:
			chatHub.mu.Lock()

			// –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			if msg.To != "" {
				for client := range chatHub.Clients {
					if client.Username == msg.To || client.Username == msg.From {
						select {
						case client.PrivateChan <- msg:
						default:
						}
					}
				}
				continue
			}

			// –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É
			if room, ok := chatHub.Rooms[msg.Room]; ok {
				room.Broadcast <- msg
			}
			chatHub.mu.Unlock()	
		}
	}
}

func (h *Hub) GetRoom(name string) *Room {
	h.mu.Lock()
	defer h.mu.Unlock()
	if room, ok := h.Rooms[name]; ok {
		return room
	}
	room := &Room{
		Name:      name,
		Clients:   make(map[*Client]bool),
		Broadcast: make(chan ChatMessage, 128),
		History:   make([]ChatMessage, 0, 50),
	}
	h.Rooms[name] = room
	go room.Run()
	return room
}

func (r *Room) Run() {
	for msg := range r.Broadcast {
		r.Mu.RLock()
		for c := range r.Clients {
			select {
			case c.PrivateChan <- msg:
			default:
			}
		}
		r.Mu.RUnlock()

		r.History = append(r.History, msg)
		if len(r.History) > 50 {
			r.History = r.History[len(r.History)-50:]
		}
	}
}

func (r *Room) OnlineUsers() []string {
	r.Mu.RLock()
	defer r.Mu.RUnlock()
	users := make([]string, 0, len(r.Clients))
	for c := range r.Clients {
		users = append(users, c.Username)
	}
	return users
}
